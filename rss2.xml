<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>我是ajian</title>
    <link>http://yoursite.com/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>选择的方向优胜于谋略的策略，方法比努力更有价值</description>
    <pubDate>Sun, 26 Jul 2020 16:49:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>赫夫曼编码</title>
      <link>http://yoursite.com/2020/07/26/HuffmanCoding/</link>
      <guid>http://yoursite.com/2020/07/26/HuffmanCoding/</guid>
      <pubDate>Sun, 26 Jul 2020 08:34:07 GMT</pubDate>
      <description>
      
        &lt;p&gt;赫夫曼编码是一种编码方式，是一种可变字长编码的一种。赫夫曼编码广泛用于数据文件的压缩，压缩率通常在20%~90%之间，也称最佳编码。&lt;/p&gt;
&lt;h3 id=&quot;赫夫曼编码压缩案例实践：&quot;&gt;&lt;a href=&quot;#赫夫曼编码压缩案例实践：&quot; class=&quot;headerlink&quot; title=&quot;赫夫曼编码压缩案例实践：&quot;&gt;&lt;/a&gt;赫夫曼编码压缩案例实践：&lt;/h3&gt;&lt;p&gt;假设有一段字符串“i like like like java do you like a java”;完成该字符串的赫夫曼编码压缩；&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>赫夫曼编码是一种编码方式，是一种可变字长编码的一种。赫夫曼编码广泛用于数据文件的压缩，压缩率通常在20%~90%之间，也称最佳编码。</p><h3 id="赫夫曼编码压缩案例实践："><a href="#赫夫曼编码压缩案例实践：" class="headerlink" title="赫夫曼编码压缩案例实践："></a>赫夫曼编码压缩案例实践：</h3><p>假设有一段字符串“i like like like java do you like a java”;完成该字符串的赫夫曼编码压缩；</p><a id="more"></a><h4 id="压缩案例主要步骤"><a href="#压缩案例主要步骤" class="headerlink" title="压缩案例主要步骤"></a>压缩案例主要步骤</h4><ol><li>统计该字符串中每个字符出现的次频，包括空格，将每个字符出现的次频放入数组，对该数组进行排序，得到一个由小到大的有序数组；</li><li>针对该有序数组构建赫夫曼树，向左的路径为0，向右的路径为1；该赫夫曼树对应的每个叶子节点所在位置，即其每个字符对应的编码；</li><li>由步骤二得到字符对应的编码表，依据编码表，把字符对应的编码顺序连接成字符串；</li><li>最后把这个二进制字符串按八位压缩成一个新的字节数组，该字节数组即压缩后的序列。</li></ol><h3 id="赫夫曼编码解压案例实践，依据上述压缩的字节数组，完成解压："><a href="#赫夫曼编码解压案例实践，依据上述压缩的字节数组，完成解压：" class="headerlink" title="赫夫曼编码解压案例实践，依据上述压缩的字节数组，完成解压："></a>赫夫曼编码解压案例实践，依据上述压缩的字节数组，完成解压：</h3><h4 id="解压案例主要步骤"><a href="#解压案例主要步骤" class="headerlink" title="解压案例主要步骤"></a>解压案例主要步骤</h4><ol><li>将字节数组中每一个元素还原成二进制数；</li><li>依据编码表把编码表中字符对应的编码在二进制字符串中抽取出来，按照反序的编码表将每一个编码对应的ASCII数值放入字节数组，该字节数组即还原的字节数组。</li></ol><h3 id="其他实践"><a href="#其他实践" class="headerlink" title="其他实践"></a>其他实践</h3><ul><li>完成对文件的压缩及解压</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> ajiany</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span>:2020/7/10</span></span><br><span class="line"><span class="comment">* 功能：1.完成对字符串的赫夫曼编码压缩及解压</span></span><br><span class="line"><span class="comment">*      2.文件的压缩与解压</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> tree.huffmancode;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuffmanCode</span> </span>&#123;</span><br><span class="line">     <span class="comment">// key为字符的ASCII值,value为字符编码</span></span><br><span class="line">     <span class="keyword">static</span> Map&lt;Byte, String&gt; singleByteCode = <span class="keyword">new</span>  HashMap&lt;Byte, String&gt;();</span><br><span class="line">     <span class="keyword">static</span> StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//         // 压缩的字符串</span></span><br><span class="line"><span class="comment">//         String huffmanStr = "i like like like java do you  like a java";</span></span><br><span class="line"><span class="comment">//         // 将字符串对应的字符转换成对应的字节码,即ACSII码值,形成数组</span></span><br><span class="line"><span class="comment">//         byte[] strBytes = huffmanStr.getBytes();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//         // 调用压缩字符串的代码</span></span><br><span class="line"><span class="comment">//         byte[] zipCode = CompressedCharacters(strBytes);</span></span><br><span class="line"><span class="comment">//         // System.out.println(Arrays.toString(zipCode));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//         // 解码</span></span><br><span class="line"><span class="comment">//         byte[] sourceStr=deCoding(singleByteCode, zipCode);</span></span><br><span class="line"><span class="comment">//         //new String(SourceStr)将[105, 32, 108, 105,  107......]转化成字符</span></span><br><span class="line"><span class="comment">//         System.out.println(new String(sourceStr));</span></span><br><span class="line">           </span><br><span class="line">           <span class="comment">//压缩文件</span></span><br><span class="line"><span class="comment">//         String zipSrcPath="F:\\GoogleDownLoad\\ajian.txt";</span></span><br><span class="line"><span class="comment">//         String savePath="F:\\GoogleDownLoad\\ajian.zip";</span></span><br><span class="line"><span class="comment">//         zipFile(zipSrcPath, savePath);</span></span><br><span class="line">           </span><br><span class="line">           <span class="comment">//解压文件</span></span><br><span class="line"><span class="comment">//         String zipSrcPath="F:\\GoogleDownLoad\\ajian.zip";</span></span><br><span class="line"><span class="comment">//         String savePath="F:\\GoogleDownLoad\\ajian1.txt";</span></span><br><span class="line"><span class="comment">//         unZipFile(zipSrcPath, savePath);</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//解压文件</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unZipFile</span><span class="params">(String srcPath,String  savePath)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//定义输入流</span></span><br><span class="line">           InputStream is=<span class="keyword">null</span>;</span><br><span class="line">           <span class="comment">//定义输出流</span></span><br><span class="line">           OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">           <span class="comment">//定义对象输入流</span></span><br><span class="line">           ObjectInputStream ois=<span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">                is=<span class="keyword">new</span> FileInputStream(srcPath);</span><br><span class="line">                ois=<span class="keyword">new</span> ObjectInputStream(is);</span><br><span class="line">                <span class="comment">//读取压缩的字节对象</span></span><br><span class="line">                <span class="keyword">byte</span>[] zipCodes= (<span class="keyword">byte</span>[]) ois.readObject();</span><br><span class="line">                <span class="comment">//读取编码表</span></span><br><span class="line">                Map&lt;Byte,String&gt; codeTable=(Map&lt;Byte,String&gt;)  ois.readObject();</span><br><span class="line">                <span class="comment">//解码</span></span><br><span class="line">                <span class="keyword">byte</span>[] deCodeStr=deCoding(codeTable, zipCodes);</span><br><span class="line">                <span class="comment">//保存解码后的文件路径</span></span><br><span class="line">                os=<span class="keyword">new</span> FileOutputStream(savePath);</span><br><span class="line">                os.write(deCodeStr);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                     is.close();</span><br><span class="line">                     os.close();</span><br><span class="line">                     ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                     e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//压缩文件</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zipFile</span><span class="params">(String srcPath,String savePath)</span>  </span>&#123;</span><br><span class="line">           <span class="comment">//定义输入流</span></span><br><span class="line">           InputStream is=<span class="keyword">null</span>;</span><br><span class="line">           <span class="comment">//定义输出流</span></span><br><span class="line">           OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">           <span class="comment">//定义对象输出流</span></span><br><span class="line">           ObjectOutputStream oos=<span class="keyword">null</span>;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">                is=<span class="keyword">new</span> FileInputStream(srcPath);</span><br><span class="line">                <span class="keyword">byte</span>[] fileBytes=<span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">                is.read(fileBytes);</span><br><span class="line">                <span class="keyword">byte</span>[] zipCodes=CompressedCharacters(fileBytes);</span><br><span class="line">                os=<span class="keyword">new</span> FileOutputStream(savePath);</span><br><span class="line">                oos=<span class="keyword">new</span> ObjectOutputStream(os);</span><br><span class="line">                <span class="comment">//将字节数组对象写入对象流</span></span><br><span class="line">                oos.writeObject(zipCodes);</span><br><span class="line">                <span class="comment">//将编码表写入对象流</span></span><br><span class="line">                oos.writeObject(singleByteCode);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                     is.close();</span><br><span class="line">                     os.close();</span><br><span class="line">                     oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                     e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 对压缩后的二进制零一编码进行解码</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> newCodeContainer 编码表</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> deCode 压缩后的字节数组</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> 返回值为解压后的字节数组</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] deCoding(Map&lt;Byte, String&gt;  newCodeContainer, <span class="keyword">byte</span>[] deCode) &#123;</span><br><span class="line">           <span class="comment">// 定义用于拼接的二进制字符串</span></span><br><span class="line">           StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">           <span class="comment">// 1.解压压缩后的字节码为二进制码</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deCode.length; i++) &#123;</span><br><span class="line">                <span class="keyword">byte</span> b = deCode[i];</span><br><span class="line">                <span class="comment">// 如果是最后一位,不补齐高位</span></span><br><span class="line">                <span class="keyword">boolean</span> flag = (i == deCode.length - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 将字节转成二进制字符串</span></span><br><span class="line">                stringBuilder.append(byteToBinaryCode(!flag,  b));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 2.按照编码表得到对应的字符的ASCII码</span></span><br><span class="line">           Map&lt;String, Byte&gt; reverBinaryCode = <span class="keyword">new</span>  HashMap&lt;String, Byte&gt;();</span><br><span class="line">           <span class="keyword">for</span> (Entry&lt;Byte, String&gt; entry :  newCodeContainer.entrySet()) &#123;</span><br><span class="line">                <span class="comment">// 将key和value值倒转</span></span><br><span class="line">                reverBinaryCode.put(entry.getValue(),  entry.getKey());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 3.根绝ASCII码得到的字符</span></span><br><span class="line">           <span class="comment">// 定义集合存放每个字符对应的ASCII码</span></span><br><span class="line">           List&lt;Byte&gt; list = <span class="keyword">new</span> ArrayList&lt;Byte&gt;();</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringBuilder.length();) &#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">                Byte bytes = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 遍历stringBuilder二进制字符串</span></span><br><span class="line">                <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                     String key = stringBuilder.substring(i, i  + count);</span><br><span class="line">                     bytes = reverBinaryCode.get(key);</span><br><span class="line">                     <span class="keyword">if</span> (bytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">                           <span class="comment">// 没有匹配到则继续向下匹配</span></span><br><span class="line">                           count++;</span><br><span class="line">                     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           flag = <span class="keyword">false</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将ASCII码添加到集合</span></span><br><span class="line">                list.add(bytes);</span><br><span class="line">                i += count;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 4.返回byte数组</span></span><br><span class="line">           <span class="keyword">byte</span>[] sourceByte = <span class="keyword">new</span> <span class="keyword">byte</span>[list.size()];</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sourceByte.length; i++) &#123;</span><br><span class="line">                sourceByte[i] = list.get(i);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> sourceByte;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 将一个byte转化位对应的二进制字符串</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> flag 表示是否需要补高位</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> b    要转的byte字节</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> 返回值为8位的二进制字符串 注意：正数需要补位,负数需要取取后八位</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteToBinaryCode</span><span class="params">(<span class="keyword">boolean</span> flag, <span class="keyword">byte</span>  b)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> temp = b;</span><br><span class="line">           <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                temp |= <span class="number">256</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           String str = Integer.toBinaryString(temp);</span><br><span class="line">           <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> str.substring(str.length() - <span class="number">8</span>);<span class="comment">// 返回从字符串长度第倒数第八位后的反码</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> str;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 将压缩字符串的代码封装</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] CompressedCharacters(<span class="keyword">byte</span>[] strBytes)  &#123;</span><br><span class="line">           <span class="comment">// 将Map&lt;Byte,Integer&gt;每个字符及对应出现次频的节点放入List集合</span></span><br><span class="line">           List&lt;HuffmanCodeNode&gt; codeContainer =  countNumber(strBytes);</span><br><span class="line">           <span class="comment">// 构建赫夫曼树</span></span><br><span class="line">           HuffmanCodeNode root =  createHuffmanTree(codeContainer);</span><br><span class="line">           <span class="comment">// 获得存放每个字符编码的编码表</span></span><br><span class="line">           Map&lt;Byte, String&gt; newCodeContainer =  getBytesCode(root);</span><br><span class="line">           <span class="comment">// 压缩字符ASCII码对应编码</span></span><br><span class="line">           <span class="keyword">byte</span>[] zipCode = zip(strBytes, newCodeContainer);</span><br><span class="line">           <span class="keyword">return</span> zipCode;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 按照编码表将字符对应的编码拼接</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] zip(<span class="keyword">byte</span>[] strBytes, Map&lt;Byte,  String&gt; newCodeContainer) &#123;</span><br><span class="line">           <span class="comment">// 压缩后的字节数组长度</span></span><br><span class="line">           <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">           <span class="comment">// 定义该字节数组的索引</span></span><br><span class="line">           <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">           <span class="comment">// 存放拼接后的零一编码字符串</span></span><br><span class="line">           StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">           <span class="comment">// 遍历strBytes数组得到每个字符对应的ASCII编码,从编码表里找到字符ASCII值对应编码并连接</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">byte</span> b : strBytes) &#123;</span><br><span class="line">                stringBuilder.append(newCodeContainer.get(b));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 计算stringBuilder按8位得到的字节数组长度</span></span><br><span class="line">           <span class="keyword">if</span> (stringBuilder.length() % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                len = stringBuilder.length() / <span class="number">8</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                len = stringBuilder.length() / <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 定义存放压缩后的字节数组</span></span><br><span class="line">           <span class="keyword">byte</span>[] zipHuffmanCode = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line">           <span class="comment">// 将8位的零一二进制补码转换成原码</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringBuilder.length(); i += <span class="number">8</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">8</span> &gt; stringBuilder.length()) &#123;<span class="comment">// 如果最后不足8位则取到最后一位即可</span></span><br><span class="line">                     zipHuffmanCode[index++] = (<span class="keyword">byte</span>)  Integer.parseInt(stringBuilder.substring(i), <span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     zipHuffmanCode[index++] = (<span class="keyword">byte</span>)  Integer.parseInt(stringBuilder.substring(i, i + <span class="number">8</span>), <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> zipHuffmanCode;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 重载getBytesCode方法</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Byte, String&gt;  <span class="title">getBytesCode</span><span class="params">(HuffmanCodeNode root)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 向左递归</span></span><br><span class="line">           getBytesCode(root.getLeftNode(), <span class="string">"0"</span>, stringBuilder);</span><br><span class="line">           <span class="comment">// 向右递归</span></span><br><span class="line">           getBytesCode(root.getRightNode(), <span class="string">"1"</span>,  stringBuilder);</span><br><span class="line">           <span class="comment">//返回编码表</span></span><br><span class="line">           <span class="keyword">return</span> singleByteCode;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 功能：得到每个字符对应的编码表</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> node          每个节点</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> code          生成的字符编码</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> stringBuilder 用来拼接的字符串编码</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getBytesCode</span><span class="params">(HuffmanCodeNode node,  String code, StringBuilder stringBuilder)</span> </span>&#123;</span><br><span class="line">           StringBuilder strBuilder = <span class="keyword">new</span>  StringBuilder(stringBuilder);</span><br><span class="line">           <span class="comment">// 将来自根节点的首个字符添加到字符串中</span></span><br><span class="line">           strBuilder.append(code);</span><br><span class="line">           <span class="comment">// 到达叶子节点</span></span><br><span class="line">           <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.getData() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                     <span class="comment">// 已经到达叶子节点</span></span><br><span class="line">                     singleByteCode.put(node.getData(),  strBuilder.toString());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="comment">// 向左递归</span></span><br><span class="line">                     getBytesCode(node.getLeftNode(), <span class="string">"0"</span>,  strBuilder);</span><br><span class="line">                     <span class="comment">// 向右递归</span></span><br><span class="line">                     getBytesCode(node.getRightNode(), <span class="string">"1"</span>,  strBuilder);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 功能：统计字节码数组中的字符出现的次数</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> 接收字节码数组</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> 返回存放节点的List&lt;HuffmanCodeNode&gt;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;HuffmanCodeNode&gt; <span class="title">countNumber</span><span class="params">(<span class="keyword">byte</span>[]  strByte)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// 定义存放每一个字符对应次频的叶子节点的集合</span></span><br><span class="line">           ArrayList&lt;HuffmanCodeNode&gt; nodesContainer = <span class="keyword">new</span>  ArrayList&lt;HuffmanCodeNode&gt;();</span><br><span class="line">           <span class="comment">// 定义HashMap容器</span></span><br><span class="line">           Map&lt;Byte, Integer&gt; node = <span class="keyword">new</span> HashMap&lt;Byte,  Integer&gt;();</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">byte</span> b : strByte) &#123;</span><br><span class="line">                Integer count = node.get(b);</span><br><span class="line">                <span class="comment">// 判断字符是否已经存在</span></span><br><span class="line">                <span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">                     <span class="comment">// 不存在则首次添加</span></span><br><span class="line">                     node.put(b, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="comment">// 继续添加</span></span><br><span class="line">                     node.put(b, ++count);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 将每一个字符对应的键和值转成HuffmanCodeNode对象,并添加进List集合</span></span><br><span class="line">           <span class="keyword">for</span> (Entry&lt;Byte, Integer&gt; i : node.entrySet()) &#123;</span><br><span class="line">                nodesContainer.add(<span class="keyword">new</span>  HuffmanCodeNode(i.getKey(), i.getValue()));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> nodesContainer;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 前序遍历二叉树</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(HuffmanCodeNode root)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                root.preOrder();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"赫夫曼树为空"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 构造赫夫曼树</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HuffmanCodeNode  <span class="title">createHuffmanTree</span><span class="params">(List&lt;HuffmanCodeNode&gt; nodes)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// 定义左右节点即父节点</span></span><br><span class="line">           HuffmanCodeNode left, right, parent;</span><br><span class="line">           <span class="keyword">while</span> (nodes.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 1.对容器中的数值进行排序</span></span><br><span class="line">                Collections.sort(nodes);</span><br><span class="line">                <span class="comment">// 2.取出前俩个最小的数值,构造新二叉树</span></span><br><span class="line">                left = nodes.get(<span class="number">0</span>);</span><br><span class="line">                right = nodes.get(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 构造父节点</span></span><br><span class="line">                parent = <span class="keyword">new</span> HuffmanCodeNode(<span class="keyword">null</span>,  left.getTimes() + right.getTimes());</span><br><span class="line">                <span class="comment">// parent树的左右指针指向取出的俩个数值</span></span><br><span class="line">                parent.setLeftNode(left);</span><br><span class="line">                parent.setRightNode(right);</span><br><span class="line">                <span class="comment">// 3.删除原先从容器里取出的俩个最小数值,添加构造好的父节点</span></span><br><span class="line">                nodes.remove(left);</span><br><span class="line">                nodes.remove(right);</span><br><span class="line">                nodes.add(parent);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//赫夫曼树节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuffmanCodeNode</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">HuffmanCodeNode</span>&gt; </span>&#123;</span><br><span class="line">     <span class="comment">// 定义存放字符对应的ACSII码的变量</span></span><br><span class="line">     <span class="keyword">private</span> Byte data;</span><br><span class="line">     <span class="comment">// 定义字符出现的次数</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> times;</span><br><span class="line">     <span class="comment">// 定义左右指针</span></span><br><span class="line">     <span class="keyword">private</span> HuffmanCodeNode leftNode;</span><br><span class="line">     <span class="keyword">private</span> HuffmanCodeNode rightNode;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">HuffmanCodeNode</span><span class="params">(Byte data, <span class="keyword">int</span> times)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.data = data;</span><br><span class="line">           <span class="keyword">this</span>.times = times;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Byte <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> data;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Byte data)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.data = data;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> times;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimes</span><span class="params">(<span class="keyword">int</span> times)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.times = times;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> HuffmanCodeNode <span class="title">getLeftNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> leftNode;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftNode</span><span class="params">(HuffmanCodeNode leftNode)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.leftNode = leftNode;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> HuffmanCodeNode <span class="title">getRightNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> rightNode;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightNode</span><span class="params">(HuffmanCodeNode rightNode)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.rightNode = rightNode;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 重写compareTo方法</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(HuffmanCodeNode o)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.times - o.times;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 重写toString方法</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"HuffmanCodeNode [data="</span> + data + <span class="string">", times="</span> +  times + <span class="string">"]"</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 前序遍历二叉树</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           System.out.println(<span class="keyword">this</span>);</span><br><span class="line">           <span class="comment">// 左子树递归</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.getLeftNode() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.getLeftNode().preOrder();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 右子树递归</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.getRightNode() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.getRightNode().preOrder();</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/07/26/HuffmanCoding/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://yoursite.com/2020/05/08/hello-world/</link>
      <guid>http://yoursite.com/2020/05/08/hello-world/</guid>
      <pubDate>Fri, 08 May 2020 11:40:28 GMT</pubDate>
      <description>
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/05/08/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
